/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Timestamp, Uint64, EventSegmentAccessType, Uint128, InstantiateMsg, EventSegments, GuestDetails, Coin, Member, ExecuteMsg, Binary, RegisteringGuest, RegisteringEventAddressAndPayment, CheckInDetails, QueryMsg, ArrayOfTicketPaymentOption, TicketPaymentOption, Addr, Config, ArrayOfTupleOfUintAndEventSegments, Boolean, ArrayOfBoolean, ArrayOfGuestDetails } from "./CwAve.types";
import { CwAveQueryClient } from "./CwAve.client";
export const cwAveQueryKeys = {
  contract: ([{
    contract: "cwAve"
  }] as const),
  address: (contractAddress: string) => ([{ ...cwAveQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  eventSegments: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "event_segments",
    args
  }] as const),
  guestTypeDetailsByWeight: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "guest_type_details_by_weight",
    args
  }] as const),
  guestTypeDetailsAll: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "guest_type_details_all",
    args
  }] as const),
  guestAttendanceStatus: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "guest_attendance_status",
    args
  }] as const),
  guestAttendanceStatusAll: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "guest_attendance_status_all",
    args
  }] as const),
  ticketPaymentOptionsByGuestWeight: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "ticket_payment_options_by_guest_weight",
    args
  }] as const),
  allTicketPaymentOptions: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "all_ticket_payment_options",
    args
  }] as const)
};
export const cwAveQueries = {
  config: <TData = Config,>({
    client,
    options
  }: CwAveConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: cwAveQueryKeys.config(client?.contractAddress),
    queryFn: () => client.config(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  eventSegments: <TData = ArrayOfTupleOfUintAndEventSegments,>({
    client,
    options
  }: CwAveEventSegmentsQuery<TData>): UseQueryOptions<ArrayOfTupleOfUintAndEventSegments, Error, TData> => ({
    queryKey: cwAveQueryKeys.eventSegments(client?.contractAddress),
    queryFn: () => client.eventSegments(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  guestTypeDetailsByWeight: <TData = GuestDetails,>({
    client,
    args,
    options
  }: CwAveGuestTypeDetailsByWeightQuery<TData>): UseQueryOptions<GuestDetails, Error, TData> => ({
    queryKey: cwAveQueryKeys.guestTypeDetailsByWeight(client?.contractAddress, args),
    queryFn: () => client.guestTypeDetailsByWeight({
      guestWeight: args.guestWeight
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  guestTypeDetailsAll: <TData = ArrayOfGuestDetails,>({
    client,
    options
  }: CwAveGuestTypeDetailsAllQuery<TData>): UseQueryOptions<ArrayOfGuestDetails, Error, TData> => ({
    queryKey: cwAveQueryKeys.guestTypeDetailsAll(client?.contractAddress),
    queryFn: () => client.guestTypeDetailsAll(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  guestAttendanceStatus: <TData = Boolean,>({
    client,
    args,
    options
  }: CwAveGuestAttendanceStatusQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: cwAveQueryKeys.guestAttendanceStatus(client?.contractAddress, args),
    queryFn: () => client.guestAttendanceStatus({
      eventStageId: args.eventStageId,
      guest: args.guest
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  guestAttendanceStatusAll: <TData = ArrayOfBoolean,>({
    client,
    args,
    options
  }: CwAveGuestAttendanceStatusAllQuery<TData>): UseQueryOptions<ArrayOfBoolean, Error, TData> => ({
    queryKey: cwAveQueryKeys.guestAttendanceStatusAll(client?.contractAddress, args),
    queryFn: () => client.guestAttendanceStatusAll({
      guest: args.guest
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ticketPaymentOptionsByGuestWeight: <TData = TicketPaymentOption,>({
    client,
    args,
    options
  }: CwAveTicketPaymentOptionsByGuestWeightQuery<TData>): UseQueryOptions<TicketPaymentOption, Error, TData> => ({
    queryKey: cwAveQueryKeys.ticketPaymentOptionsByGuestWeight(client?.contractAddress, args),
    queryFn: () => client.ticketPaymentOptionsByGuestWeight({
      guestWeight: args.guestWeight
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allTicketPaymentOptions: <TData = ArrayOfTicketPaymentOption,>({
    client,
    options
  }: CwAveAllTicketPaymentOptionsQuery<TData>): UseQueryOptions<ArrayOfTicketPaymentOption, Error, TData> => ({
    queryKey: cwAveQueryKeys.allTicketPaymentOptions(client?.contractAddress),
    queryFn: () => client.allTicketPaymentOptions(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CwAveReactQuery<TResponse, TData = TResponse> {
  client: CwAveQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwAveAllTicketPaymentOptionsQuery<TData> extends CwAveReactQuery<ArrayOfTicketPaymentOption, TData> {}
export function useCwAveAllTicketPaymentOptionsQuery<TData = ArrayOfTicketPaymentOption>({
  client,
  options
}: CwAveAllTicketPaymentOptionsQuery<TData>) {
  return useQuery<ArrayOfTicketPaymentOption, Error, TData>(cwAveQueryKeys.allTicketPaymentOptions(client.contractAddress), () => client.allTicketPaymentOptions(), options);
}
export interface CwAveTicketPaymentOptionsByGuestWeightQuery<TData> extends CwAveReactQuery<TicketPaymentOption, TData> {
  args: {
    guestWeight: number;
  };
}
export function useCwAveTicketPaymentOptionsByGuestWeightQuery<TData = TicketPaymentOption>({
  client,
  args,
  options
}: CwAveTicketPaymentOptionsByGuestWeightQuery<TData>) {
  return useQuery<TicketPaymentOption, Error, TData>(cwAveQueryKeys.ticketPaymentOptionsByGuestWeight(client.contractAddress, args), () => client.ticketPaymentOptionsByGuestWeight({
    guestWeight: args.guestWeight
  }), options);
}
export interface CwAveGuestAttendanceStatusAllQuery<TData> extends CwAveReactQuery<ArrayOfBoolean, TData> {
  args: {
    guest: string;
  };
}
export function useCwAveGuestAttendanceStatusAllQuery<TData = ArrayOfBoolean>({
  client,
  args,
  options
}: CwAveGuestAttendanceStatusAllQuery<TData>) {
  return useQuery<ArrayOfBoolean, Error, TData>(cwAveQueryKeys.guestAttendanceStatusAll(client.contractAddress, args), () => client.guestAttendanceStatusAll({
    guest: args.guest
  }), options);
}
export interface CwAveGuestAttendanceStatusQuery<TData> extends CwAveReactQuery<Boolean, TData> {
  args: {
    eventStageId: number;
    guest: string;
  };
}
export function useCwAveGuestAttendanceStatusQuery<TData = Boolean>({
  client,
  args,
  options
}: CwAveGuestAttendanceStatusQuery<TData>) {
  return useQuery<Boolean, Error, TData>(cwAveQueryKeys.guestAttendanceStatus(client.contractAddress, args), () => client.guestAttendanceStatus({
    eventStageId: args.eventStageId,
    guest: args.guest
  }), options);
}
export interface CwAveGuestTypeDetailsAllQuery<TData> extends CwAveReactQuery<ArrayOfGuestDetails, TData> {}
export function useCwAveGuestTypeDetailsAllQuery<TData = ArrayOfGuestDetails>({
  client,
  options
}: CwAveGuestTypeDetailsAllQuery<TData>) {
  return useQuery<ArrayOfGuestDetails, Error, TData>(cwAveQueryKeys.guestTypeDetailsAll(client.contractAddress), () => client.guestTypeDetailsAll(), options);
}
export interface CwAveGuestTypeDetailsByWeightQuery<TData> extends CwAveReactQuery<GuestDetails, TData> {
  args: {
    guestWeight: number;
  };
}
export function useCwAveGuestTypeDetailsByWeightQuery<TData = GuestDetails>({
  client,
  args,
  options
}: CwAveGuestTypeDetailsByWeightQuery<TData>) {
  return useQuery<GuestDetails, Error, TData>(cwAveQueryKeys.guestTypeDetailsByWeight(client.contractAddress, args), () => client.guestTypeDetailsByWeight({
    guestWeight: args.guestWeight
  }), options);
}
export interface CwAveEventSegmentsQuery<TData> extends CwAveReactQuery<ArrayOfTupleOfUintAndEventSegments, TData> {}
export function useCwAveEventSegmentsQuery<TData = ArrayOfTupleOfUintAndEventSegments>({
  client,
  options
}: CwAveEventSegmentsQuery<TData>) {
  return useQuery<ArrayOfTupleOfUintAndEventSegments, Error, TData>(cwAveQueryKeys.eventSegments(client.contractAddress), () => client.eventSegments(), options);
}
export interface CwAveConfigQuery<TData> extends CwAveReactQuery<Config, TData> {}
export function useCwAveConfigQuery<TData = Config>({
  client,
  options
}: CwAveConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(cwAveQueryKeys.config(client.contractAddress), () => client.config(), options);
}