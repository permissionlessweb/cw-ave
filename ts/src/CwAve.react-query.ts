/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, Uint128, InstantiateMsg, EventSegments, GuestDetails, Coin, Member, ExecuteMsg, Binary, Cw20ReceiveMsg, RegisteringGuest, CheckInDetails, QueryMsg, Addr, Config, ArrayOfEventSegments, Boolean, ArrayOfBoolean } from "./CwAve.types";
import { CwAveQueryClient, CwAveClient } from "./CwAve.client";
export const cwAveQueryKeys = {
  contract: ([{
    contract: "cwAve"
  }] as const),
  address: (contractAddress: string) => ([{ ...cwAveQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  eventSegments: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "event_stages",
    args
  }] as const),
  guestAttendanceStatus: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "guest_attendance_status",
    args
  }] as const),
  guestAttendanceStatusALL: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "guest_attendance_status_a_l_l",
    args
  }] as const)
};
export const cwAveQueries = {
  config: <TData = Config,>({
    client,
    options
  }: CwAveConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: cwAveQueryKeys.config(client?.contractAddress),
    queryFn: () => client.config(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  eventSegments: <TData = ArrayOfEventSegments,>({
    client,
    options
  }: CwAveEventSegmentsQuery<TData>): UseQueryOptions<ArrayOfEventSegments, Error, TData> => ({
    queryKey: cwAveQueryKeys.eventSegments(client?.contractAddress),
    queryFn: () => client.eventSegments(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  guestAttendanceStatus: <TData = Boolean,>({
    client,
    args,
    options
  }: CwAveGuestAttendanceStatusQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: cwAveQueryKeys.guestAttendanceStatus(client?.contractAddress, args),
    queryFn: () => client.guestAttendanceStatus({
      eventStageId: args.eventStageId,
      guest: args.guest
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  guestAttendanceStatusALL: <TData = ArrayOfBoolean,>({
    client,
    args,
    options
  }: CwAveGuestAttendanceStatusALLQuery<TData>): UseQueryOptions<ArrayOfBoolean, Error, TData> => ({
    queryKey: cwAveQueryKeys.guestAttendanceStatusALL(client?.contractAddress, args),
    queryFn: () => client.guestAttendanceStatusALL({
      guest: args.guest
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CwAveReactQuery<TResponse, TData = TResponse> {
  client: CwAveQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwAveGuestAttendanceStatusALLQuery<TData> extends CwAveReactQuery<ArrayOfBoolean, TData> {
  args: {
    guest: string;
  };
}
export function useCwAveGuestAttendanceStatusALLQuery<TData = ArrayOfBoolean>({
  client,
  args,
  options
}: CwAveGuestAttendanceStatusALLQuery<TData>) {
  return useQuery<ArrayOfBoolean, Error, TData>(cwAveQueryKeys.guestAttendanceStatusALL(client.contractAddress, args), () => client.guestAttendanceStatusALL({
    guest: args.guest
  }), options);
}
export interface CwAveGuestAttendanceStatusQuery<TData> extends CwAveReactQuery<Boolean, TData> {
  args: {
    eventStageId: number;
    guest: string;
  };
}
export function useCwAveGuestAttendanceStatusQuery<TData = Boolean>({
  client,
  args,
  options
}: CwAveGuestAttendanceStatusQuery<TData>) {
  return useQuery<Boolean, Error, TData>(cwAveQueryKeys.guestAttendanceStatus(client.contractAddress, args), () => client.guestAttendanceStatus({
    eventStageId: args.eventStageId,
    guest: args.guest
  }), options);
}
export interface CwAveEventSegmentsQuery<TData> extends CwAveReactQuery<ArrayOfEventSegments, TData> {}
export function useCwAveEventSegmentsQuery<TData = ArrayOfEventSegments>({
  client,
  options
}: CwAveEventSegmentsQuery<TData>) {
  return useQuery<ArrayOfEventSegments, Error, TData>(cwAveQueryKeys.eventSegments(client.contractAddress), () => client.eventSegments(), options);
}
export interface CwAveConfigQuery<TData> extends CwAveReactQuery<Config, TData> {}
export function useCwAveConfigQuery<TData = Config>({
  client,
  options
}: CwAveConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(cwAveQueryKeys.config(client.contractAddress), () => client.config(), options);
}
export interface CwAveRefundUnconfirmedTicketsMutation {
  client: CwAveClient;
  msg: {
    guests: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAveRefundUnconfirmedTicketsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAveRefundUnconfirmedTicketsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAveRefundUnconfirmedTicketsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.refundUnconfirmedTickets(msg, fee, memo, funds), options);
}
export interface CwAveCheckInGuestMutation {
  client: CwAveClient;
  msg: {
    checkin: CheckInDetails;
    stage: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAveCheckInGuestMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAveCheckInGuestMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAveCheckInGuestMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.checkInGuest(msg, fee, memo, funds), options);
}
export interface CwAvePurchaseTicketsMutation {
  client: CwAveClient;
  msg: {
    guests: RegisteringGuest[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAvePurchaseTicketsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAvePurchaseTicketsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAvePurchaseTicketsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.purchaseTickets(msg, fee, memo, funds), options);
}
export interface CwAveReceiveMutation {
  client: CwAveClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwAveReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwAveReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwAveReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}