/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Timestamp, Uint64, EventSegmentAccessType, Uint128, InstantiateMsg, EventSegments, GuestDetails, Coin, Member, ExecuteMsg, Binary, Cw20ReceiveMsg, RegisteringGuest, CheckInDetails, QueryMsg, ArrayOfTicketPaymentOptionResponse, TicketPaymentOptionResponse, Addr, Config, ArrayOfEventSegments, Boolean, ArrayOfBoolean } from "./CwAve.types";
import { CwAveQueryClient } from "./CwAve.client";
export const cwAveQueryKeys = {
  contract: ([{
    contract: "cwAve"
  }] as const),
  address: (contractAddress: string) => ([{ ...cwAveQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  eventSegments: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "event_segments",
    args
  }] as const),
  guestAttendanceStatus: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "guest_attendance_status",
    args
  }] as const),
  guestAttendanceStatusALL: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "guest_attendance_status_a_l_l",
    args
  }] as const),
  ticketPaymentOptionsByGuestType: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "ticket_payment_options_by_guest_type",
    args
  }] as const),
  allTicketPaymentOptions: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveQueryKeys.address(contractAddress)[0],
    method: "all_ticket_payment_options",
    args
  }] as const)
};
export const cwAveQueries = {
  config: <TData = Config,>({
    client,
    options
  }: CwAveConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: cwAveQueryKeys.config(client?.contractAddress),
    queryFn: () => client.config(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  eventSegments: <TData = ArrayOfEventSegments,>({
    client,
    options
  }: CwAveEventSegmentsQuery<TData>): UseQueryOptions<ArrayOfEventSegments, Error, TData> => ({
    queryKey: cwAveQueryKeys.eventSegments(client?.contractAddress),
    queryFn: () => client.eventSegments(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  guestAttendanceStatus: <TData = Boolean,>({
    client,
    args,
    options
  }: CwAveGuestAttendanceStatusQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: cwAveQueryKeys.guestAttendanceStatus(client?.contractAddress, args),
    queryFn: () => client.guestAttendanceStatus({
      eventStageId: args.eventStageId,
      guest: args.guest
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  guestAttendanceStatusALL: <TData = ArrayOfBoolean,>({
    client,
    args,
    options
  }: CwAveGuestAttendanceStatusALLQuery<TData>): UseQueryOptions<ArrayOfBoolean, Error, TData> => ({
    queryKey: cwAveQueryKeys.guestAttendanceStatusALL(client?.contractAddress, args),
    queryFn: () => client.guestAttendanceStatusALL({
      guest: args.guest
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ticketPaymentOptionsByGuestType: <TData = TicketPaymentOptionResponse,>({
    client,
    args,
    options
  }: CwAveTicketPaymentOptionsByGuestTypeQuery<TData>): UseQueryOptions<TicketPaymentOptionResponse, Error, TData> => ({
    queryKey: cwAveQueryKeys.ticketPaymentOptionsByGuestType(client?.contractAddress, args),
    queryFn: () => client.ticketPaymentOptionsByGuestType({
      guestType: args.guestType
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  allTicketPaymentOptions: <TData = ArrayOfTicketPaymentOptionResponse,>({
    client,
    options
  }: CwAveAllTicketPaymentOptionsQuery<TData>): UseQueryOptions<ArrayOfTicketPaymentOptionResponse, Error, TData> => ({
    queryKey: cwAveQueryKeys.allTicketPaymentOptions(client?.contractAddress),
    queryFn: () => client.allTicketPaymentOptions(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CwAveReactQuery<TResponse, TData = TResponse> {
  client: CwAveQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwAveAllTicketPaymentOptionsQuery<TData> extends CwAveReactQuery<ArrayOfTicketPaymentOptionResponse, TData> {}
export function useCwAveAllTicketPaymentOptionsQuery<TData = ArrayOfTicketPaymentOptionResponse>({
  client,
  options
}: CwAveAllTicketPaymentOptionsQuery<TData>) {
  return useQuery<ArrayOfTicketPaymentOptionResponse, Error, TData>(cwAveQueryKeys.allTicketPaymentOptions(client.contractAddress), () => client.allTicketPaymentOptions(), options);
}
export interface CwAveTicketPaymentOptionsByGuestTypeQuery<TData> extends CwAveReactQuery<TicketPaymentOptionResponse, TData> {
  args: {
    guestType: string;
  };
}
export function useCwAveTicketPaymentOptionsByGuestTypeQuery<TData = TicketPaymentOptionResponse>({
  client,
  args,
  options
}: CwAveTicketPaymentOptionsByGuestTypeQuery<TData>) {
  return useQuery<TicketPaymentOptionResponse, Error, TData>(cwAveQueryKeys.ticketPaymentOptionsByGuestType(client.contractAddress, args), () => client.ticketPaymentOptionsByGuestType({
    guestType: args.guestType
  }), options);
}
export interface CwAveGuestAttendanceStatusALLQuery<TData> extends CwAveReactQuery<ArrayOfBoolean, TData> {
  args: {
    guest: string;
  };
}
export function useCwAveGuestAttendanceStatusALLQuery<TData = ArrayOfBoolean>({
  client,
  args,
  options
}: CwAveGuestAttendanceStatusALLQuery<TData>) {
  return useQuery<ArrayOfBoolean, Error, TData>(cwAveQueryKeys.guestAttendanceStatusALL(client.contractAddress, args), () => client.guestAttendanceStatusALL({
    guest: args.guest
  }), options);
}
export interface CwAveGuestAttendanceStatusQuery<TData> extends CwAveReactQuery<Boolean, TData> {
  args: {
    eventStageId: number;
    guest: string;
  };
}
export function useCwAveGuestAttendanceStatusQuery<TData = Boolean>({
  client,
  args,
  options
}: CwAveGuestAttendanceStatusQuery<TData>) {
  return useQuery<Boolean, Error, TData>(cwAveQueryKeys.guestAttendanceStatus(client.contractAddress, args), () => client.guestAttendanceStatus({
    eventStageId: args.eventStageId,
    guest: args.guest
  }), options);
}
export interface CwAveEventSegmentsQuery<TData> extends CwAveReactQuery<ArrayOfEventSegments, TData> {}
export function useCwAveEventSegmentsQuery<TData = ArrayOfEventSegments>({
  client,
  options
}: CwAveEventSegmentsQuery<TData>) {
  return useQuery<ArrayOfEventSegments, Error, TData>(cwAveQueryKeys.eventSegments(client.contractAddress), () => client.eventSegments(), options);
}
export interface CwAveConfigQuery<TData> extends CwAveReactQuery<Config, TData> {}
export function useCwAveConfigQuery<TData = Config>({
  client,
  options
}: CwAveConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(cwAveQueryKeys.config(client.contractAddress), () => client.config(), options);
}