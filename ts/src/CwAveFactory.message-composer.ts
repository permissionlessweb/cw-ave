/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Timestamp, Uint64, Uint128, Action, Expiration, EventSegments, GuestDetails, Coin, Member, QueryMsg, ArrayOfAvEventContract, AvEventContract, Addr, OwnershipForAddr } from "./CwAveFactory.types";
export interface CwAveFactoryMessage {
  contractAddress: string;
  sender: string;
  createNativeAvEventContract: ({
    instantiateMsg,
    label
  }: {
    instantiateMsg: InstantiateMsg;
    label: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCodeId: ({
    shitstrapCodeId
  }: {
    shitstrapCodeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CwAveFactoryMessageComposer implements CwAveFactoryMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createNativeAvEventContract = this.createNativeAvEventContract.bind(this);
    this.updateCodeId = this.updateCodeId.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  createNativeAvEventContract = ({
    instantiateMsg,
    label
  }: {
    instantiateMsg: InstantiateMsg;
    label: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_native_av_event_contract: {
            instantiate_msg: instantiateMsg,
            label
          }
        })),
        funds
      })
    };
  };
  updateCodeId = ({
    shitstrapCodeId
  }: {
    shitstrapCodeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_code_id: {
            shitstrap_code_id: shitstrapCodeId
          }
        })),
        funds
      })
    };
  };
  updateOwnership = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_ownership: {}
        })),
        funds
      })
    };
  };
}