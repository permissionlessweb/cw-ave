/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, EventSegmentAccessType, Uint128,  EventSegment, GuestDetails, Coin, Member, ExecuteMsg, Binary, RegisteringGuest, RegisteringEventAddressAndPayment, CheckInDetails, QueryMsg, ArrayOfTicketPaymentOption, TicketPaymentOption, Addr, Config, ArrayOfEventSegmentRes, EventSegmentRes, Boolean, ArrayOfBoolean, ArrayOfGuestDetails } from "./CwAve.types";
export interface CwAveReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  eventSegments: () => Promise<ArrayOfEventSegmentRes>;
  guestTypeDetailsByWeight: ({
    guestWeight
  }: {
    guestWeight: number;
  }) => Promise<GuestDetails>;
  guestTypeDetailsAll: () => Promise<ArrayOfGuestDetails>;
  guestAttendanceStatus: ({
    eventStageId,
    guest
  }: {
    eventStageId: number;
    guest: string;
  }) => Promise<Boolean>;
  guestAttendanceStatusAll: ({
    guest
  }: {
    guest: string;
  }) => Promise<ArrayOfBoolean>;
  ticketPaymentOptionsByGuestWeight: ({
    guestWeight
  }: {
    guestWeight: number;
  }) => Promise<TicketPaymentOption>;
  allTicketPaymentOptions: () => Promise<ArrayOfTicketPaymentOption>;
}
export class CwAveQueryClient implements CwAveReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.eventSegments = this.eventSegments.bind(this);
    this.guestTypeDetailsByWeight = this.guestTypeDetailsByWeight.bind(this);
    this.guestTypeDetailsAll = this.guestTypeDetailsAll.bind(this);
    this.guestAttendanceStatus = this.guestAttendanceStatus.bind(this);
    this.guestAttendanceStatusAll = this.guestAttendanceStatusAll.bind(this);
    this.ticketPaymentOptionsByGuestWeight = this.ticketPaymentOptionsByGuestWeight.bind(this);
    this.allTicketPaymentOptions = this.allTicketPaymentOptions.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  eventSegments = async (): Promise<ArrayOfEventSegmentRes> => {
    return this.client.queryContractSmart(this.contractAddress, {
      event_segments: {}
    });
  };
  guestTypeDetailsByWeight = async ({
    guestWeight
  }: {
    guestWeight: number;
  }): Promise<GuestDetails> => {
    return this.client.queryContractSmart(this.contractAddress, {
      guest_type_details_by_weight: {
        guest_weight: guestWeight
      }
    });
  };
  guestTypeDetailsAll = async (): Promise<ArrayOfGuestDetails> => {
    return this.client.queryContractSmart(this.contractAddress, {
      guest_type_details_all: {}
    });
  };
  guestAttendanceStatus = async ({
    eventStageId,
    guest
  }: {
    eventStageId: number;
    guest: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      guest_attendance_status: {
        event_stage_id: eventStageId,
        guest
      }
    });
  };
  guestAttendanceStatusAll = async ({
    guest
  }: {
    guest: string;
  }): Promise<ArrayOfBoolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      guest_attendance_status_all: {
        guest
      }
    });
  };
  ticketPaymentOptionsByGuestWeight = async ({
    guestWeight
  }: {
    guestWeight: number;
  }): Promise<TicketPaymentOption> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ticket_payment_options_by_guest_weight: {
        guest_weight: guestWeight
      }
    });
  };
  allTicketPaymentOptions = async (): Promise<ArrayOfTicketPaymentOption> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_ticket_payment_options: {}
    });
  };
}
export interface CwAveInterface extends CwAveReadOnlyInterface {
  contractAddress: string;
  sender: string;
  purchaseTickets: ({
    guests
  }: {
    guests: RegisteringGuest[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  checkInGuest: ({
    checkin
  }: {
    checkin: CheckInDetails;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  refundUnconfirmedTickets: ({
    guests
  }: {
    guests: string[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  claimTicketPayments: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class CwAveClient extends CwAveQueryClient implements CwAveInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.purchaseTickets = this.purchaseTickets.bind(this);
    this.checkInGuest = this.checkInGuest.bind(this);
    this.refundUnconfirmedTickets = this.refundUnconfirmedTickets.bind(this);
    this.claimTicketPayments = this.claimTicketPayments.bind(this);
  }

  purchaseTickets = async ({
    guests
  }: {
    guests: RegisteringGuest[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      purchase_tickets: {
        guests
      }
    }, fee_, memo_, funds_);
  };
  checkInGuest = async ({
    checkin
  }: {
    checkin: CheckInDetails;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      check_in_guest: {
        checkin
      }
    }, fee_, memo_, funds_);
  };
  refundUnconfirmedTickets = async ({
    guests
  }: {
    guests: string[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      refund_unconfirmed_tickets: {
        guests
      }
    }, fee_, memo_, funds_);
  };
  claimTicketPayments = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_ticket_payments: {}
    }, fee_, memo_, funds_);
  };
}