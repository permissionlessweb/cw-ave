/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Timestamp, Uint64, Uint128, InstantiateMsg, EventSegments, GuestDetails, Coin, Member, ExecuteMsg, Binary, Cw20ReceiveMsg, RegisteringGuest, CheckInDetails, QueryMsg, Addr, Config, ArrayOfEventSegments, Boolean, ArrayOfBoolean } from "./CwAve.types";
export interface CwAveMessage {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  purchaseTickets: ({
    guests
  }: {
    guests: RegisteringGuest[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  checkInGuest: ({
    checkin,
    stage
  }: {
    checkin: CheckInDetails;
    stage: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  refundUnconfirmedTickets: ({
    guests
  }: {
    guests: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CwAveMessageComposer implements CwAveMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.purchaseTickets = this.purchaseTickets.bind(this);
    this.checkInGuest = this.checkInGuest.bind(this);
    this.refundUnconfirmedTickets = this.refundUnconfirmedTickets.bind(this);
  }

  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            msg,
            sender
          }
        })),
        funds
      })
    };
  };
  purchaseTickets = ({
    guests
  }: {
    guests: RegisteringGuest[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          purchase_tickets: {
            guests
          }
        })),
        funds
      })
    };
  };
  checkInGuest = ({
    checkin,
    stage
  }: {
    checkin: CheckInDetails;
    stage: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          check_in_guest: {
            checkin,
            stage
          }
        })),
        funds
      })
    };
  };
  refundUnconfirmedTickets = ({
    guests
  }: {
    guests: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          refund_unconfirmed_tickets: {
            guests
          }
        })),
        funds
      })
    };
  };
}