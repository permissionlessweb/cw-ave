/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Timestamp, Uint64, EventSegmentAccessType, Uint128, InstantiateMsg, EventSegment, GuestDetails, Coin, Member, ExecuteMsg, Binary, RegisteringGuest, RegisteringEventAddressAndPayment, CheckInDetails, QueryMsg, ArrayOfTicketPaymentOption, TicketPaymentOption, Addr, Config, ArrayOfEventSegmentRes, EventSegmentRes, Boolean, ArrayOfBoolean, ArrayOfGuestDetails } from "./CwAve.types";
export interface CwAveMsg {
  contractAddress: string;
  sender: string;
  purchaseTickets: ({
    guests
  }: {
    guests: RegisteringGuest[];
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  checkInGuest: ({
    checkin
  }: {
    checkin: CheckInDetails;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  refundUnconfirmedTickets: ({
    guests
  }: {
    guests: string[];
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  claimTicketPayments: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CwAveMsgComposer implements CwAveMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.purchaseTickets = this.purchaseTickets.bind(this);
    this.checkInGuest = this.checkInGuest.bind(this);
    this.refundUnconfirmedTickets = this.refundUnconfirmedTickets.bind(this);
    this.claimTicketPayments = this.claimTicketPayments.bind(this);
  }

  purchaseTickets = ({
    guests
  }: {
    guests: RegisteringGuest[];
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          purchase_tickets: {
            guests
          }
        })),
        funds: funds_
      })
    };
  };
  checkInGuest = ({
    checkin
  }: {
    checkin: CheckInDetails;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          check_in_guest: {
            checkin
          }
        })),
        funds: funds_
      })
    };
  };
  refundUnconfirmedTickets = ({
    guests
  }: {
    guests: string[];
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          refund_unconfirmed_tickets: {
            guests
          }
        })),
        funds: funds_
      })
    };
  };
  claimTicketPayments = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_ticket_payments: {}
        })),
        funds: funds_
      })
    };
  };
}