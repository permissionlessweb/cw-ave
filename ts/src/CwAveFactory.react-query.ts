/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { InstantiateMsg, ExecuteMsg, Timestamp, Uint64, EventSegmentAccessType, Uint128, Action, Expiration, EventSegment, GuestDetails, Coin, Member, QueryMsg, ArrayOfAvEventContract, AvEventContract, Addr, OwnershipForAddr } from "./CwAveFactory.types";
import { CwAveFactoryQueryClient } from "./CwAveFactory.client";
export const cwAveFactoryQueryKeys = {
  contract: ([{
    contract: "cwAveFactory"
  }] as const),
  address: (contractAddress: string) => ([{ ...cwAveFactoryQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  listAvEventContracts: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveFactoryQueryKeys.address(contractAddress)[0],
    method: "list_av_event_contracts",
    args
  }] as const),
  listAvEventContractsReverse: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveFactoryQueryKeys.address(contractAddress)[0],
    method: "list_av_event_contracts_reverse",
    args
  }] as const),
  listAvEventContractsByInstantiator: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveFactoryQueryKeys.address(contractAddress)[0],
    method: "list_av_event_contracts_by_instantiator",
    args
  }] as const),
  listAvEventContractsByInstantiatorReverse: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveFactoryQueryKeys.address(contractAddress)[0],
    method: "list_av_event_contracts_by_instantiator_reverse",
    args
  }] as const),
  ownership: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveFactoryQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const),
  codeId: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...cwAveFactoryQueryKeys.address(contractAddress)[0],
    method: "code_id",
    args
  }] as const)
};
export const cwAveFactoryQueries = {
  listAvEventContracts: <TData = ArrayOfAvEventContract,>({
    client,
    args,
    options
  }: CwAveFactoryListAvEventContractsQuery<TData>): UseQueryOptions<ArrayOfAvEventContract, Error, TData> => ({
    queryKey: cwAveFactoryQueryKeys.listAvEventContracts(client?.contractAddress, args),
    queryFn: () => client.listAvEventContracts({
      limit: args.limit,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listAvEventContractsReverse: <TData = ArrayOfAvEventContract,>({
    client,
    args,
    options
  }: CwAveFactoryListAvEventContractsReverseQuery<TData>): UseQueryOptions<ArrayOfAvEventContract, Error, TData> => ({
    queryKey: cwAveFactoryQueryKeys.listAvEventContractsReverse(client?.contractAddress, args),
    queryFn: () => client.listAvEventContractsReverse({
      limit: args.limit,
      startBefore: args.startBefore
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listAvEventContractsByInstantiator: <TData = ArrayOfAvEventContract,>({
    client,
    args,
    options
  }: CwAveFactoryListAvEventContractsByInstantiatorQuery<TData>): UseQueryOptions<ArrayOfAvEventContract, Error, TData> => ({
    queryKey: cwAveFactoryQueryKeys.listAvEventContractsByInstantiator(client?.contractAddress, args),
    queryFn: () => client.listAvEventContractsByInstantiator({
      instantiator: args.instantiator,
      limit: args.limit,
      startAfter: args.startAfter
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listAvEventContractsByInstantiatorReverse: <TData = ArrayOfAvEventContract,>({
    client,
    args,
    options
  }: CwAveFactoryListAvEventContractsByInstantiatorReverseQuery<TData>): UseQueryOptions<ArrayOfAvEventContract, Error, TData> => ({
    queryKey: cwAveFactoryQueryKeys.listAvEventContractsByInstantiatorReverse(client?.contractAddress, args),
    queryFn: () => client.listAvEventContractsByInstantiatorReverse({
      instantiator: args.instantiator,
      limit: args.limit,
      startBefore: args.startBefore
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForAddr,>({
    client,
    options
  }: CwAveFactoryOwnershipQuery<TData>): UseQueryOptions<OwnershipForAddr, Error, TData> => ({
    queryKey: cwAveFactoryQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client.ownership(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  codeId: <TData = Uint64,>({
    client,
    options
  }: CwAveFactoryCodeIdQuery<TData>): UseQueryOptions<Uint64, Error, TData> => ({
    queryKey: cwAveFactoryQueryKeys.codeId(client?.contractAddress),
    queryFn: () => client.codeId(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CwAveFactoryReactQuery<TResponse, TData = TResponse> {
  client: CwAveFactoryQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwAveFactoryCodeIdQuery<TData> extends CwAveFactoryReactQuery<Uint64, TData> {}
export function useCwAveFactoryCodeIdQuery<TData = Uint64>({
  client,
  options
}: CwAveFactoryCodeIdQuery<TData>) {
  return useQuery<Uint64, Error, TData>(cwAveFactoryQueryKeys.codeId(client.contractAddress), () => client.codeId(), options);
}
export interface CwAveFactoryOwnershipQuery<TData> extends CwAveFactoryReactQuery<OwnershipForAddr, TData> {}
export function useCwAveFactoryOwnershipQuery<TData = OwnershipForAddr>({
  client,
  options
}: CwAveFactoryOwnershipQuery<TData>) {
  return useQuery<OwnershipForAddr, Error, TData>(cwAveFactoryQueryKeys.ownership(client.contractAddress), () => client.ownership(), options);
}
export interface CwAveFactoryListAvEventContractsByInstantiatorReverseQuery<TData> extends CwAveFactoryReactQuery<ArrayOfAvEventContract, TData> {
  args: {
    instantiator: string;
    limit?: number;
    startBefore?: string;
  };
}
export function useCwAveFactoryListAvEventContractsByInstantiatorReverseQuery<TData = ArrayOfAvEventContract>({
  client,
  args,
  options
}: CwAveFactoryListAvEventContractsByInstantiatorReverseQuery<TData>) {
  return useQuery<ArrayOfAvEventContract, Error, TData>(cwAveFactoryQueryKeys.listAvEventContractsByInstantiatorReverse(client.contractAddress, args), () => client.listAvEventContractsByInstantiatorReverse({
    instantiator: args.instantiator,
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface CwAveFactoryListAvEventContractsByInstantiatorQuery<TData> extends CwAveFactoryReactQuery<ArrayOfAvEventContract, TData> {
  args: {
    instantiator: string;
    limit?: number;
    startAfter?: string;
  };
}
export function useCwAveFactoryListAvEventContractsByInstantiatorQuery<TData = ArrayOfAvEventContract>({
  client,
  args,
  options
}: CwAveFactoryListAvEventContractsByInstantiatorQuery<TData>) {
  return useQuery<ArrayOfAvEventContract, Error, TData>(cwAveFactoryQueryKeys.listAvEventContractsByInstantiator(client.contractAddress, args), () => client.listAvEventContractsByInstantiator({
    instantiator: args.instantiator,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface CwAveFactoryListAvEventContractsReverseQuery<TData> extends CwAveFactoryReactQuery<ArrayOfAvEventContract, TData> {
  args: {
    limit?: number;
    startBefore?: string;
  };
}
export function useCwAveFactoryListAvEventContractsReverseQuery<TData = ArrayOfAvEventContract>({
  client,
  args,
  options
}: CwAveFactoryListAvEventContractsReverseQuery<TData>) {
  return useQuery<ArrayOfAvEventContract, Error, TData>(cwAveFactoryQueryKeys.listAvEventContractsReverse(client.contractAddress, args), () => client.listAvEventContractsReverse({
    limit: args.limit,
    startBefore: args.startBefore
  }), options);
}
export interface CwAveFactoryListAvEventContractsQuery<TData> extends CwAveFactoryReactQuery<ArrayOfAvEventContract, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCwAveFactoryListAvEventContractsQuery<TData = ArrayOfAvEventContract>({
  client,
  args,
  options
}: CwAveFactoryListAvEventContractsQuery<TData>) {
  return useQuery<ArrayOfAvEventContract, Error, TData>(cwAveFactoryQueryKeys.listAvEventContracts(client.contractAddress, args), () => client.listAvEventContracts({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}