{
  "contract_name": "cw-ave",
  "contract_version": "0.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "cw420",
      "description",
      "event_curator",
      "event_timeline",
      "guest_details",
      "title",
      "usher_admins"
    ],
    "properties": {
      "cw420": {
        "description": "code-id of cw420 contract",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "description": {
        "description": "description of shitstrap for recordkeeping",
        "type": "string"
      },
      "event_curator": {
        "description": "if not set, sender",
        "type": "string"
      },
      "event_timeline": {
        "description": "timeline of events segments",
        "type": "array",
        "items": {
          "$ref": "#/definitions/EventSegments"
        }
      },
      "guest_details": {
        "description": "details of each type of guest attendees can participate as",
        "type": "array",
        "items": {
          "$ref": "#/definitions/GuestDetails"
        }
      },
      "title": {
        "description": "Dao one must be a member of to make use of shitstraps label for contract & front end",
        "type": "string"
      },
      "usher_admins": {
        "description": "list of admin keys able to checkin guests",
        "type": "array",
        "items": {
          "$ref": "#/definitions/Member"
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EventSegmentAccessType": {
        "oneOf": [
          {
            "description": "only checkin for this segment, not checking in for any other segement.",
            "type": "object",
            "required": [
              "single_segment"
            ],
            "properties": {
              "single_segment": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "once checked in to this segment, guest is also checked into all other segments set here.",
            "type": "object",
            "required": [
              "specific_segments"
            ],
            "properties": {
              "specific_segments": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventSegments": {
        "description": "Defines timelengths of a specific stage of an event. For example, a private screening could have 2 shows, so we define the start and end for both.",
        "type": "object",
        "required": [
          "end",
          "stage_description",
          "start"
        ],
        "properties": {
          "end": {
            "$ref": "#/definitions/Timestamp"
          },
          "stage_description": {
            "type": "string"
          },
          "start": {
            "$ref": "#/definitions/Timestamp"
          }
        },
        "additionalProperties": false
      },
      "GuestDetails": {
        "type": "object",
        "required": [
          "event_segment_access",
          "guest_type",
          "guest_weight",
          "max_ticket_limit",
          "ticket_cost",
          "total_ticket_limit"
        ],
        "properties": {
          "event_segment_access": {
            "$ref": "#/definitions/EventSegmentAccessType"
          },
          "guest_type": {
            "description": "label specific to type of guest",
            "type": "string"
          },
          "guest_weight": {
            "description": "weight used in cw420 to distinguish guest types",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "max_ticket_limit": {
            "description": "limit to number of tickets a guest can purchase",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "ticket_cost": {
            "description": "limit to number of this type of guests array of coins accepted for ticket",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "total_ticket_limit": {
            "description": "the total amount of tickets available for this guest type",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Member": {
        "description": "A group member has a weight associated with them. This may all be equal, or may have meaning in the app that makes use of the group (eg. voting power)",
        "type": "object",
        "required": [
          "addr",
          "weight"
        ],
        "properties": {
          "addr": {
            "type": "string"
          },
          "weight": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "purchase_tickets"
        ],
        "properties": {
          "purchase_tickets": {
            "type": "object",
            "required": [
              "guests"
            ],
            "properties": {
              "guests": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RegisteringGuest"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "check_in_guest"
        ],
        "properties": {
          "check_in_guest": {
            "type": "object",
            "required": [
              "checkin"
            ],
            "properties": {
              "checkin": {
                "$ref": "#/definitions/CheckInDetails"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "refund_unconfirmed_tickets"
        ],
        "properties": {
          "refund_unconfirmed_tickets": {
            "type": "object",
            "required": [
              "guests"
            ],
            "properties": {
              "guests": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim_ticket_payments"
        ],
        "properties": {
          "claim_ticket_payments": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CheckInDetails": {
        "type": "object",
        "required": [
          "pubkey",
          "signature",
          "signed_data",
          "ticket_addr"
        ],
        "properties": {
          "pubkey": {
            "description": "cosmos_sdk_proto::Any of the pubkey that generated the signature",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "signature": {
            "description": "signature generated by event guest of ADR-036 schema containing `signed_data`",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "signed_data": {
            "description": "base64 binary of `CheckInSignatureData`",
            "type": "string"
          },
          "ticket_addr": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisteringEventAddressAndPayment": {
        "type": "object",
        "required": [
          "payment_asset",
          "ticket_addr"
        ],
        "properties": {
          "payment_asset": {
            "description": "the microdenomination of the token being payed for this registering guest",
            "type": "string"
          },
          "ticket_addr": {
            "description": "the ephemeral wallet being used for this specific event",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisteringGuest": {
        "type": "object",
        "required": [
          "guest_weight",
          "reap"
        ],
        "properties": {
          "guest_weight": {
            "description": "label specific to type of guest a user is purchasing a ticket for",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "reap": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RegisteringEventAddressAndPayment"
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "returns basic details regarding this event",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All segements for this event",
        "type": "object",
        "required": [
          "event_segments"
        ],
        "properties": {
          "event_segments": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Details of a specific type of guest able to participate in event as.",
        "type": "object",
        "required": [
          "guest_type_details_by_weight"
        ],
        "properties": {
          "guest_type_details_by_weight": {
            "type": "object",
            "required": [
              "guest_weight"
            ],
            "properties": {
              "guest_weight": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All details of types of guest",
        "type": "object",
        "required": [
          "guest_type_details_all"
        ],
        "properties": {
          "guest_type_details_all": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "returns whether or not a guest has checked in for a specific segment of this event",
        "type": "object",
        "required": [
          "guest_attendance_status"
        ],
        "properties": {
          "guest_attendance_status": {
            "type": "object",
            "required": [
              "event_stage_id",
              "guest"
            ],
            "properties": {
              "event_stage_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "guest": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Checkin status for a single guest, for all stages of this event",
        "type": "object",
        "required": [
          "guest_attendance_status_all"
        ],
        "properties": {
          "guest_attendance_status_all": {
            "type": "object",
            "required": [
              "guest"
            ],
            "properties": {
              "guest": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All payment options accepted for a given ticket type",
        "type": "object",
        "required": [
          "ticket_payment_options_by_guest_weight"
        ],
        "properties": {
          "ticket_payment_options_by_guest_weight": {
            "type": "object",
            "required": [
              "guest_weight"
            ],
            "properties": {
              "guest_weight": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All payment options available",
        "type": "object",
        "required": [
          "all_ticket_payment_options"
        ],
        "properties": {
          "all_ticket_payment_options": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_ticket_payment_options": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_TicketPaymentOption",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TicketPaymentOption"
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "TicketPaymentOption": {
          "type": "object",
          "required": [
            "guest_type",
            "payment_options"
          ],
          "properties": {
            "guest_type": {
              "type": "string"
            },
            "payment_options": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "curator",
        "event_guest_contract",
        "event_usher_contract",
        "title"
      ],
      "properties": {
        "curator": {
          "$ref": "#/definitions/Addr"
        },
        "event_guest_contract": {
          "$ref": "#/definitions/Addr"
        },
        "event_usher_contract": {
          "$ref": "#/definitions/Addr"
        },
        "title": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "event_segments": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_EventSegments",
      "type": "array",
      "items": {
        "$ref": "#/definitions/EventSegments"
      },
      "definitions": {
        "EventSegments": {
          "description": "Defines timelengths of a specific stage of an event. For example, a private screening could have 2 shows, so we define the start and end for both.",
          "type": "object",
          "required": [
            "end",
            "stage_description",
            "start"
          ],
          "properties": {
            "end": {
              "$ref": "#/definitions/Timestamp"
            },
            "stage_description": {
              "type": "string"
            },
            "start": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "guest_attendance_status": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "guest_attendance_status_all": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Boolean",
      "type": "array",
      "items": {
        "type": "boolean"
      }
    },
    "guest_type_details_all": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_GuestDetails",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GuestDetails"
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "EventSegmentAccessType": {
          "oneOf": [
            {
              "description": "only checkin for this segment, not checking in for any other segement.",
              "type": "object",
              "required": [
                "single_segment"
              ],
              "properties": {
                "single_segment": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "once checked in to this segment, guest is also checked into all other segments set here.",
              "type": "object",
              "required": [
                "specific_segments"
              ],
              "properties": {
                "specific_segments": {
                  "type": "object",
                  "required": [
                    "ids"
                  ],
                  "properties": {
                    "ids": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "uint64",
                        "minimum": 0.0
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "GuestDetails": {
          "type": "object",
          "required": [
            "event_segment_access",
            "guest_type",
            "guest_weight",
            "max_ticket_limit",
            "ticket_cost",
            "total_ticket_limit"
          ],
          "properties": {
            "event_segment_access": {
              "$ref": "#/definitions/EventSegmentAccessType"
            },
            "guest_type": {
              "description": "label specific to type of guest",
              "type": "string"
            },
            "guest_weight": {
              "description": "weight used in cw420 to distinguish guest types",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "max_ticket_limit": {
              "description": "limit to number of tickets a guest can purchase",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "ticket_cost": {
              "description": "limit to number of this type of guests array of coins accepted for ticket",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "total_ticket_limit": {
              "description": "the total amount of tickets available for this guest type",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "guest_type_details_by_weight": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GuestDetails",
      "type": "object",
      "required": [
        "event_segment_access",
        "guest_type",
        "guest_weight",
        "max_ticket_limit",
        "ticket_cost",
        "total_ticket_limit"
      ],
      "properties": {
        "event_segment_access": {
          "$ref": "#/definitions/EventSegmentAccessType"
        },
        "guest_type": {
          "description": "label specific to type of guest",
          "type": "string"
        },
        "guest_weight": {
          "description": "weight used in cw420 to distinguish guest types",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_ticket_limit": {
          "description": "limit to number of tickets a guest can purchase",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "ticket_cost": {
          "description": "limit to number of this type of guests array of coins accepted for ticket",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "total_ticket_limit": {
          "description": "the total amount of tickets available for this guest type",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "EventSegmentAccessType": {
          "oneOf": [
            {
              "description": "only checkin for this segment, not checking in for any other segement.",
              "type": "object",
              "required": [
                "single_segment"
              ],
              "properties": {
                "single_segment": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "once checked in to this segment, guest is also checked into all other segments set here.",
              "type": "object",
              "required": [
                "specific_segments"
              ],
              "properties": {
                "specific_segments": {
                  "type": "object",
                  "required": [
                    "ids"
                  ],
                  "properties": {
                    "ids": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "uint64",
                        "minimum": 0.0
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "ticket_payment_options_by_guest_weight": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TicketPaymentOption",
      "type": "object",
      "required": [
        "guest_type",
        "payment_options"
      ],
      "properties": {
        "guest_type": {
          "type": "string"
        },
        "payment_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
